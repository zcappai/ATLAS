# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'function_screen - Copy.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from single_method_choice import Ui_SingleChoiceWindow
from mult_compare_method import Ui_MultCompareWindow
from det_compare_method import Ui_DetCompareWindow
from inverse_compare_method import Ui_InverseCompareWindow
from solving_compare_method import Ui_SolveCompareWindow
from compare_loading_screen import Ui_CompLoadingWindow
from os import mkdir
import multiplication
import determinant
import inverse
import solving
from emptyimg import empty
from closeWindow import QMainWindow
import saver
import sympy as sp

class Ui_SingleCompWindow(object):
    def __init__(self, arg, method):
        self.arg = arg
        self.method = method

    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 4, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 4, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 1, 1, 1, 4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem3, 6, 1, 1, 1)
        self.comparison_button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.comparison_button.setFont(font)
        self.comparison_button.setObjectName("comparison_button")
        self.comparison_button.clicked.connect(self.toCompare)
        self.gridLayout.addWidget(self.comparison_button, 4, 3, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem4, 3, 3, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem5, 4, 4, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem6, 6, 3, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 2, 0, 1, 5)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem7, 3, 1, 1, 1)
        self.one_option_button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.one_option_button.setFont(font)
        self.one_option_button.setObjectName("one_option_button")
        self.one_option_button.clicked.connect(self.toSingle)
        self.gridLayout.addWidget(self.one_option_button, 4, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1110, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        MainWindow.setWindowTitle("ATLAS")
        self.comparison_button.setText("Comparison")
        self.label.setText("Click one of the options below:\n\"One Method\" allows you to choose a single method to use.\n\"Comparison\" allows you to compare all valid methods.")
        self.one_option_button.setText("One Method")

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

#     def retranslateUi(self, MainWindow):
#         _translate = QtCore.QCoreApplication.translate
#         MainWindow.setWindowTitle(_translate("MainWindow", "ATLAS"))
#         self.comparison_button.setText(_translate("MainWindow", "Comparison"))
#         self.label.setText(_translate("MainWindow", "Select one of the options:\n"
# "\"One Method\" allows you to choose a single method to use\n"
# "\"Comparison\" allows you to compare all the methods available."))
#         self.one_option_button.setText(_translate("MainWindow", "One Method"))

    def toSingle(self):
        self.window = QMainWindow()
        self.ui = Ui_SingleChoiceWindow(self.arg, self.method)
        self.ui.setupUi(self.window)
        self.MainWindow.hide()
        self.window.show()

    def toCompare(self):
        empty()
        self.window = QMainWindow()
        if self.method == "mult":
            self.compareMult()
        elif self.method == "det":
            self.compareDet()
        elif self.method == "inv":
            self.compareInv()
        elif self.method == "solve":
            self.compareSolve()
        elif self.method == "e_val":
            self.ui = Ui_SingleChoiceWindow(self.arg, self.method) #############
            self.ui.setupUi(self.window)
            self.MainWindow.hide()
            self.window.show()
        elif self.method == "e_vec":
            self.ui = Ui_SingleChoiceWindow(self.arg, self.method) #############
            self.ui.setupUi(self.window)
            self.MainWindow.hide()
            self.window.show()

    def compareMult(self):
        methods = multiplication.getMethods()
        methodsToSend = []
        for (i, j) in methods:
            self.zero()
            mkdir("images/{}/".format(i))
            current_method = j(*self.arg)
            current_method.calc()
            methodsToSend.append(current_method)
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_CompLoadingWindow("mult", methodsToSend)
        self.ui.setupUi(self.window)
        self.MainWindow.hide()
        self.window.show()

    def compareDet(self):
        methods = determinant.getMethods()
        methodsToSend = []
        for (i, j) in methods:
            self.zero()
            mkdir("images/{}/".format(i))
            current_method = j(self.arg)
            current_method.calc()
            methodsToSend.append(current_method)
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_CompLoadingWindow("det", methodsToSend)
        self.ui.setupUi(self.window)
        self.MainWindow.hide()
        self.window.show()

    def compareInv(self):
        methods = inverse.getMethods()
        methodsToSend = []
        for (i, j) in methods:
            self.zero()
            mkdir("images/{}/".format(i))
            current_method = j(self.arg)
            current_method.calc()
            methodsToSend.append(current_method)
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_CompLoadingWindow("inv", methodsToSend)
        self.ui.setupUi(self.window)
        self.MainWindow.hide()
        self.window.show()

    def compareSolve(self):
        methods = solving.getMethods()
        methodsToSend = []
        for (i, j) in methods:
            self.zero()
            mkdir("images/{}/".format(i))
            matrix = self.arg[:, :]
            current_method = j(matrix)
            current_method.calc()
            methodsToSend.append(current_method)
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_CompLoadingWindow("solve", methodsToSend)
        self.ui.setupUi(self.window)
        self.MainWindow.hide()
        self.window.show()

    def zero(self):
        saver.saved = []
        saver.names = 0

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_SingleCompWindow(None, "mult")
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
