# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'multiplication_input.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from multiplication import naiveMultiplication
from mult_single_method import Ui_MultSingleWindow
from single_comparison import Ui_SingleCompWindow
from functools import partial
from validator import Validator
from emptyimg import empty
import sympy as sp
from closeWindow import QMainWindow

class Ui_MultInWindow(object):
    def __init__(self, leftdim, shareddim, rightdim):
        self.leftdim = leftdim
        self.shareddim = shareddim ## make these private
        self.rightdim = rightdim

    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 871)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 8, 1, 1, 2)
        self.matrixleft = QtWidgets.QTableWidget(self.centralwidget)
        self.matrixleft.setInputMethodHints(QtCore.Qt.ImhNone)
        self.matrixleft.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.matrixleft.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.matrixleft.setRowCount(self.leftdim)
        self.matrixleft.setColumnCount(self.shareddim)
        self.matrixleft.setObjectName("matrixleft")
        self.gridLayout.addWidget(self.matrixleft, 3, 1, 2, 1)
        for i in range(self.matrixleft.columnCount()):
            for j in range(self.matrixleft.rowCount()):
                self.matrixleft.setItem(j, i, QtWidgets.QTableWidgetItem('0'))
        # self.matrixleft.itemChanged.connect(self.validation_left) #################################
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 2, 1, 1, 1)
        self.matrixright = QtWidgets.QTableWidget(self.centralwidget)
        self.matrixright.setRowCount(self.shareddim)
        self.matrixright.setColumnCount(self.rightdim)
        self.matrixright.setObjectName("matrixright")
        self.gridLayout.addWidget(self.matrixright, 3, 2, 1, 1)
        for i in range(self.matrixright.columnCount()):
            for j in range(self.matrixright.rowCount()):
                self.matrixright.setItem(j, i, QtWidgets.QTableWidgetItem('0'))
        self.validator_left = Validator(self.matrixleft)
        self.validator_right = Validator(self.matrixright)
        self.matrixleft.itemChanged.connect(self.validator_left.validate) #################################
        self.matrixright.itemChanged.connect(self.validator_right.validate) #################################
        # self.matrixright.itemChanged.connect(self.validation_right) #################################
        self.matrix_info = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.matrix_info.setFont(font)
        self.matrix_info.setWordWrap(True)
        self.matrix_info.setObjectName("matrix_info")
        self.gridLayout.addWidget(self.matrix_info, 0, 0, 1, 4)
        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setMinimumSize(QtCore.QSize(125, 50))
        self.submit.setObjectName("submit")
        self.gridLayout.addWidget(self.submit, 7, 1, 1, 2, QtCore.Qt.AlignHCenter)
        self.submit.clicked.connect(self.sendMatrices)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 1, 1, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1100, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ATLAS"))
        self.label.setText(_translate("MainWindow", "Left Matrix"))
        self.matrix_info.setText(_translate("MainWindow", "Please enter the values into the 2 matrices below.\n"
"Use the scrollbar for larger matrices, if necessary."))
        self.submit.setText(_translate("MainWindow", "Submit"))
        self.label_2.setText(_translate("MainWindow", "Right Matrix"))

    # def validation_left(self):
    #     input_text = self.matrixleft.currentItem().text()
    #     validation_rule = QtGui.QDoubleValidator(-100, 100, 10)
    #     if validation_rule.validate(input_text, 0)[0] == QtGui.QValidator.Acceptable:
    #         pass
    #     else:
    #         cell = self.matrixleft.currentIndex()
    #         self.matrixleft.setCurrentCell(cell.row(), cell.column())
    #         self.matrixleft.setItem(cell.row(), cell.column(), QtWidgets.QTableWidgetItem('0'))
    #         print("INVALID!") ################### INSERT A POPUP MESSAGE HERE = "Invalid input. Default value set to 0."

    # def validation_right(self):
    #     input_text = self.matrixright.currentItem().text()
    #     validation_rule = QtGui.QDoubleValidator(-100, 100, 10)
    #     if validation_rule.validate(input_text, 0)[0] == QtGui.QValidator.Acceptable:
    #         pass
    #     else:
    #         cell = self.matrixright.currentIndex()
    #         self.matrixright.setCurrentCell(cell.row(), cell.column())
    #         self.matrixright.setItem(cell.row(), cell.column(), QtWidgets.QTableWidgetItem('0'))
    #         print("INVALID!") ################### INSERT A POPUP MESSAGE HERE = "Invalid input. Default value set to 0."

    def sendMatrices(self):
        final_matrix_left = []
        for i in range(self.matrixleft.rowCount()):
            curr_row = []
            for j in range(self.matrixleft.columnCount()):
                curr_row.append(self.matrixleft.item(i, j).text())
            final_matrix_left.append(curr_row)
        final_matrix_right = []
        for i in range(self.matrixright.rowCount()):
            curr_row = []
            for j in range(self.matrixright.columnCount()):
                curr_row.append(self.matrixright.item(i, j).text())
            final_matrix_right.append(curr_row)
        final_matrix_left = sp.Matrix(final_matrix_left)
        final_matrix_right = sp.Matrix(final_matrix_right)
        arg = (final_matrix_left, final_matrix_right)

        self.window = QMainWindow()
        self.ui = Ui_SingleCompWindow(arg, "mult")
        self.ui.setupUi(self.window)
        self.MainWindow.hide()
        self.window.showMaximized()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MultInWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
